<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <style type="text/css">
      html { height: 100% }
      body { height: 100%; margin: 0; padding: 0 }
      #map-canvas { height: 100% }
    </style>
    
    <link type="text/css" rel="stylesheet" href="css/jquery-ui.min.css">
    <link type="text/css" rel="stylesheet" href="css/vis.css">
  
    <script type="text/javascript" src="js/jquery.js"></script>
     <script type="text/javascript" src="js/jquery.json.min.js"></script>
    <script type="text/javascript" src="js/jquery-ui.min.js"></script>
    <script type="text/javascript" src="js/portal.min.js"></script>
    <script type="text/javascript" src="js/randomColor.js"></script>
    <script src="js/peg-0.8.0.min.js"></script>
  <script src="js/jsDump.js" ></script>
  <script type="text/javascript" src="js/vis.js"></script>
  

    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDUTsGEgrknzPi1xdS1NxH5quGucPmpZoA&v=3.exp&libraries=drawing"></script>

    <script type="text/javascript">

var clientState = undefined;

if(typeof(Storage) !== "undefined") {
    // Code for localStorage/sessionStorage.

    if (localStorage.testarr){
      console.log("found test arr");
    }
    else{
      console.log("nothing found");
      var o= {"content":[{"val":1},{"val":2}]};
      localStorage.testarr = $.toJSON(o);
    }

} else {
    // Sorry! No Web Storage support..
}

var uiState = {
  knnList:[],
  rangeList:[], 
  resolveRangePredVar: function (v){
    var i =0;
    while (i < uiState.rangeList.length){
      if (v == uiState.rangeList[i].name) {
        return createMBR(uiState.rangeList[i].rect);
      }
      i++;          
    }
    return null;
  },
  resolveKNNPredVar: function (v){
    var i =0;
    while (i < uiState.knnList.length){
      if (v == uiState.knnList[i].name) {
        // console.log(uiState.knnList[i].marker.getPosition());
        var p = uiState.knnList[i].marker.getPosition();
        return {lat:p.lat(),lng:p.lng()};
      }
      i++;          
    }
    return null;
  }
};

    
   	var gmap = null;

    var beforeColor = '#CF5656';
    var afterColor = '#9BC150';

    var polylines = [];

    var drawingContext = {
      rectangles:[],
      rectangleMaxCount:3
    };
    var drawingManager = null;

    var beforeRectOptions = {
      clickable: true,
      draggable:true,
      editable:true,
      fillColor: beforeColor, 
      fillOpacity: 0.5,
      strokeWeight: 5
    };

    // place holder object for the request
    var request = {
        mbr:null
      };




    var drawingOptions = {
      drawingMode: null,//google.maps.drawing.OverlayType.RECTANGLE,
      drawingControl: true,
      drawingControlOptions: {
        position: google.maps.ControlPosition.TOP_CENTER,
        drawingModes: [
          // google.maps.drawing.OverlayType.CIRCLE,
          // google.maps.drawing.OverlayType.POLYGON,
          google.maps.drawing.OverlayType.MARKER,
          google.maps.drawing.OverlayType.RECTANGLE
        ]
      },
      markerOptions:{draggable:true},
      rectangleOptions:beforeRectOptions

    };


var es; // event stream handle

    
      function initialize() {

        var mapOptions = {

          // US 
          // 39.730255, -98.018183
        		//24.507052, 45.371521

        		// berlin
        		// 52.520190250694526&west=13.405380249023438&south=52.51914570999911&east=13.407440185546875 
            // makkah : 22.473878, 40.121263
          center: new google.maps.LatLng(39.730255, -98.018183),
          zoom: 5
        };
        var map = new google.maps.Map(document.getElementById("map-canvas"),
            mapOptions);
        gmap = map;

        drawingOptions.rectangleOptions = beforeRectOptions;

      drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);
      drawingManager.addListener("markercomplete",function(e){
        if ((uiState.knnList.length) == drawingContext.rectangleMaxCount){ //TODO change limit
          e.setMap(null);
        }
        else{
          var qid = uiState.knnList.length;
          uiState.knnList.push({show:true,name:"f"+qid,marker:e});  

          e.addListener("position_changed",function(){
            updateKNNPred(qid, this);  
          });
          updateKNNList();  
        }
      });
      drawingManager.addListener("rectanglecomplete",function(e){
        // console.log("a rectangle is completed");
        // console.log(e.getBounds());
        // console.log("current count = "+drawingContext.rectangles.length);
        if ((uiState.rangeList.length) == drawingContext.rectangleMaxCount){
          // console.log("max count has reached which is "+drawingContext.rectangleMaxCount);
          e.setMap(null);
        }
        else{
          var qid = uiState.rangeList.length;
          uiState.rangeList.push({show:true,name:"r"+qid,rect:e});  

          e.addListener("bounds_changed",function(){
            updateMBR(qid, this);  
          });
          updateRangeList();  
        }

      });

      drawingManager.setMap(map);

      }

      var queries = [];
      var inputpoints =[];
      var trips =[];
      var lines = [];

      var eventsources = [];

      $(document).ready(function() {

        nodes = new vis.DataSet();
  // nodes.on("add",function (event, properties, senderId) {
  // console.log('event:', event, 'properties:', properties, 'senderId:', senderId);
  // stats.node_count++;
  // });
  // var nodes = [
    // {id: 1, label: 'Node 1'},
    // {id: 2, label: 'Node 2'},
    // {id: 3, label: 'Node 3'},
    // {id: 4, label: 'Node 4'},
    // {id: 5, label: 'Node 5'}
  // ];

  // for (var i = 0; i < nodeSet.length; i++) {
  //   nodes[i] = {};
  // };

  // create an array with edges
  edges = new vis.DataSet();
  // edges.on("add",function (event, properties, senderId) {
  // console.log('event:', event, 'properties:', properties, 'senderId:', senderId);
  // stats.node_edge++;
//  });
  // var edges = [
    // {from: 1, to: 2},
    // {from: 1, to: 3},
    // {from: 2, to: 4},
    // {from: 2, to: 5}
  // ];

  // create a network
  // var container = document.getElementById('visholder');
  // var data = {
  //   nodes: nodes,
  //   edges: edges
  // };
  // var options = {
  //   edges: {
  //   style: 'arrow'
  // }
  // };
  // var network = new vis.Network(container, data, options);



        /** Parser Code **/

        var parser = PEG.buildParser($("#SyncSQLGrammar").text().trim(), uiState);
        function syncSQLparse(){
                try{
                    var pres = parser.parse($("#textData").val());
                    // console.log(pres);
                    $('#prettyPrint').text(jsDump.parse(pres));
                    return pres;
                } catch (err){
                    $('#prettyPrint').text(jsDump.parse(err));
                    return null;
                }
            }
      
      $("#buttonPanel span").click(function(event) {
        $("#textData").val($(this).attr('data'));
      });
      
      $("#compileSQL").click(function() {
        var ast = syncSQLparse();
        // console.log(ast);

        $( "#dialog-ast" ).dialog({
          // resizable:false,
          height:'auto',
          width:'auto',
          modal: true,
          open: function( event, ui ) {
            $("#tabs").tabs();
          },
          // buttons: {
          //   "Delete all items": function() {
          //     $( this ).dialog( "close" );
          //   },
          //   Cancel: function() {
          //     $( this ).dialog( "close" );
          //   }
          // }
        });
      });
       /**     **/

        // Intialize google maps
    	  google.maps.event.addDomListener(window, 'load', initialize);



   		});

      var markers = [];

      function clearMap(){
        while (drawingContext.rectangles.length > 0){
          drawingContext.rectangles.pop().setMap(null);
        }
        drawingOptions.rectangleOptions = beforeRectOptions;
        drawingManager.setOptions(drawingOptions);
        drawingManager.setMap(gmap);

        // remove all polylines

        while (polylines.length > 0){
          polylines.pop().setMap(null);
        }


      }

          // place holder object for the request
        var request = {
            mbr:null
          };

      // This function creates the MBR (spatial predicate) for the query
      function updateMBR(qid, rect){
        // console.log(qid);
        // console.log(uiState.rangeList[qid]);
        // console.log(rect);
        uiState.rangeList[qid].rect = rect;
      }


      function updateRangeList(){
        $("#rangeList").empty();
        for (var i = 0; i < uiState.rangeList.length; i++) {
          var t = uiState.rangeList[i];
          $("#rangeList").append('<li>'+t.name+'</li>');
        };
      }

      function updateKNNPred(qid, marker){
        // console.log(marker);
        uiState.knnList[qid].marker = marker;
      }

      function updateKNNList(){
        $("#knnList").empty();
        for (var i = 0; i < uiState.knnList.length; i++) {
          var t = uiState.knnList[i];
          $("#knnList").append('<li>'+t.name+'</li>');
        };
      }


    function createMBR(rect){
        return {
          north:rect.getBounds().getNorthEast().lat(),
          east:rect.getBounds().getNorthEast().lng(),
          south:rect.getBounds().getSouthWest().lat(),
          west:rect.getBounds().getSouthWest().lng()
        };
      }

      
    </script>
    <style type="text/css">
    #controlpanel {
      position:relative;width:100%;z-index:5;
      /*background-color:#B3D1FF;*/
      background-color: black;
      display: block;
      height: 8em;
      /*overflow: scroll;*/
    }
    #side {
      padding: 1em;
      display: block;
      width:14em;
      height: 100%;
      z-index: 5;
      float: left;
    }
    #logo{
      display: block;
      width: 14em;
      height: 100%;
      background-color: black;
      float: left;
    }

    #logo img {

       width: 14em;
       flaot:left;
    }

     /* Styling code for display purposes */
    .jsDump {
        overflow: auto;
        /*max-height: 20em;*/
        margin: 0;
        padding: .5em 1em;
        border: 2px solid silver;
        border-top: none;
        background-color: #f0f0f0;
        display: block;
        font-family: monospace;
        white-space: pre;
        width:auto;
    }

    #buttonPanel {
      float:left;
      padding: 1em;
      padding-bottom: 0em;  
      padding-right: 0em;      
    }

    #buttonPanel button {
      width:10em;
      height: 4em;
    }
    #textEntry {
      float: left;
      width:52em;
      padding: 1em;
      padding-bottom: 0em;
    }

    .hidden {
      display: none;
    }

    #buttonPanel span{
      color: white;

    }

    .predicateList span {
      
    }
    </style>
  </head>
  <body>
  	<div id="controlpanel" >
    <div id="logo">
      <img src="images/logo-pu.png">
    </div>
    <div >
      
    <div id="tabs-4">
    <div id="textEntry" style="">
        <textarea id="textData" style="width:840px;height: 100px; font-size:larger;">create streamed view q1 as 
select * 
from s1 
where s1.inRange(r1);</textarea>
    </div>
    <div id="buttonPanel">
      <button id="compileSQL" class="button">Parse</button>  
      <span style="display:none;" data='create streamed view q1 as 
select * 
from s1 as stream1 sync 3,s1 as s2 sync 7
where stream1.rid = "r1" and s2.RoomTemp = s1.RoomTemp and s2.kNN(5,f1);'>Join</span>
      <span data="create streamed view q1 as 
select * 
from s1 
where s1.inRange(r1);">Range</span>
      <span data="create streamed view q1 as 
select * 
from s1 
where s1.kNN(4,f1);">KNN</span>      
    </div>
    
    <!-- <button id="visQuery">Visualize</button> -->

    <div id="dialog-ast" class="hidden" title="Parse Tree">
    <div id="prettyPrint" class="jsDump"></div>
    </div>

<!--     <div id="dialog-vis" class="hidden" >    
    <div id="visholder"></div>  
    </div>   -->
    
    
</div>
    
    </div>
  	
  	<div style="position:relative" id="clist"></div>
	</div>
  <div id="side">
    <div class="predicateList">
      <span>Focal points</span>
      <ul id="knnList">
      <li>No points</li>
      </ul>
    </div>
    <div class="predicateList">
    <span>Range predicates</span>
      <ul id="rangeList">
      <li>No predicates</li>
      </ul>
    </div>
    <div class="predicateList">
      
    </div>
  </div>
  <div id="map-canvas" style="z-index:0;"></div>

  <div id="SyncSQLGrammar" style="display:none;">
/*
* Grammar for parsing SyncSQL
* Currently Implemented:
*  - Register Source Statement
Example:  
register source s2 (JsString rid, JsNumber RoomTemp, JsString RoomNotes, JsNumber phoneNumber);

*  - Select Statement
*     - With Project -
Example:
create streamed view q1 as 
select * 
from s1 as stream1 sync 3,s2
where s1.rid = "r1" and s2.roomTemp = 3;

* - Spatial Predicates inRange and kNN

*/

{
//var uiState = {
//resolveRangePredVar: function(){return null;},
//resolveKNNPredVar:function(){return null;}
//};

   function getState(){
      return uiState;
   }

   function bindVar(t, v){
      //console.log(uiState);
     if (t == "kNN"){
      console.log(uiState.resolveKNNPredVar(v));
      return uiState.resolveKNNPredVar(v);
     } 
     else if (t == "inRange"){        
        return uiState.resolveRangePredVar(v);
     }
     else return null;
   }
}

start = sqls:sqlstmt spp ";" sps {return sqls}
sqlstmt = regstmt / createviewstmt


createviewstmt = "create" spp "streamed" spp "view" spp cn:ident spp as spp sel:selectstmt {var res = {"type":"query"}; res.name=cn; 
//res.pl = sel.pl; res.fc = sel.fc; res.wc = sel.wc;

res.sourceNames = [];
for (i in sel.fc){ if ($.inArray(sel.fc[i].name,res.sourceNames) === -1 ) res.sourceNames.push(sel.fc[i].name); }
res.plan = {};
var child;
if (sel.fc.length == 1){
if (sel.wc != null){
child = {"type":"select","conditions":sel.wc.conditions};
child.children = [sel.fc.pop()];
}
else{
child = sel.fc[0]
}
sel.pl.children = [child]
   res.plan =sel.pl;
}
else{
// sel.fc.length == 2
var leftleaf = sel.fc.pop();
var rightleaf = sel.fc.pop();
var left = leftleaf;
var right = rightleaf;

var jconds = [];
var i = sel.wc.conditions.length-1;
while (sel.wc.conditions.length){

 var sn = sel.wc.conditions[i][0].streamName;
var cleft = sel.wc.conditions[i][0];
var cright = sel.wc.conditions[i][2];
if ($.isPlainObject(cleft) && $.isPlainObject(cright)){
// a join condition
var jcond = sel.wc.conditions.splice(i,1);
jconds.push(jcond[0]);
}
else if (sn === left.name ||  sn === left.alias){
  
   var leftselect = {};
   leftselect.type = "select";
   leftselect.conditions = sel.wc.conditions.splice(i,1);
   leftselect.children=[left];
   left = leftselect;
 }
else if (sn === right.name || sn === right.alias){

   var rightselect = {};
   rightselect.type = "select";
   rightselect.conditions = sel.wc.conditions.splice(i,1);
   rightselect.children=[right];
   right = rightselect;
}
--i;
   
}
var join = {"type":"join","conditions":jconds,"children":[left,right]};

   sel.pl.children = [join]
   res.plan =sel.pl;
}

return res;}

/****** BEGIN Select Statement *****/

selectstmt = "select" spp pl:projectList spp fc:fromclause wc:(spp whereclause)?
{var res = {};
res.pl = pl;
res.fc = fc;
res.plan = {};
if (wc != null){
res.wc = wc[1];
}
return res;}

projectList = pa:"*" {return {"type":"project","attributes":[pa]}}

fromclause = "from" sp sl:sourceList {return sl;}

sourceList = s1:sourceName sps sl:(comma sps sourceList)? 
{var res = []; 
res.push(s1); if (sl != null) for (i in sl[2]) res.push(sl[2][i]); return res;}

sourceName = n:ident  a:(sps as sp ident)? sps sync:(sps "sync" sp numVal)? {
var res = {};
res.type = "stream";
res.name = n
if (a != null) res.alias = a[3];
if (sync != null) res.sync = sync[3];
return res;}

whereclause = "where" spp cl:condList {return {"conditions":cl};}

condList = c1:scondition sps cl:("and" sp condList)? {var res = []; res.push(c1); if (cl != null){
for (i in cl[2]) res.push(cl[2][i]);
}; return res;}

scondition = lhs:cident sp cop:coper sp rhs:cident {return [lhs,cop,rhs];}
/ lhs:cident sp cop:coper sp rhs:numVal {return [lhs,cop,rhs];}
/ lhs:cident sp cop:coper sp rhs:strVal {return [lhs,cop,rhs];}
/ obj:ident sps dot sps pname:predName1 sps op sps parg:ident  sps cp {return [obj,pname,bindVar(pname,parg)];}
/ obj:ident sps dot sps pname:predName2n sps op sps kval:numVal sps comma sps parg:ident  sps cp {return [obj,pname,kval,bindVar(pname,parg)];}

cident = sa:(ident ".")? ca:ident { if (sa != null) return {"streamName":sa[0],"attributeName":ca}; else return {"attributeName":ca};}

coper = "=" / ">" / "<" / ">=" / "<=" / "!="

as = "as"

/****** END Select Statement *****/

/****** BEGIN  Register Source Statement *****/
regstmt = "register" sp "source" sp id:ident sp op sps schema:attrList sps cp {return {"type":"sources","id":id,"schema":schema}}

attrList = a1:attribute sps comma sps an:attrList 
{var res = []; res.push(a1); 
for (i in an) res.push(an[i]);
return res;}
           / a:attribute {var res =[]; res.push(a);return res;}
attribute = dt:data_type sps attrName:ident sps k:isKey?
{
var res = new Object(); 
res = {"name":attrName,"type":dt};
if (k != null) res["isKey"] = (k!=null);
return res;
}
isKey = "key"

/****** END Register Source Statement *****/


numVal = dig:[0-9]+ {return new Number(dig.join("")).valueOf();}
strVal = "\"" str:ident "\"" {return str;}



ident = alpha:[a-zA-Z]+dig:[0-9]* {return alpha.join("").concat(dig.join(""));}
data_type = "JsNumber" / "JsString" / "JsBoolean" 

predName1 = "inRange" 
predName2n = "kNN"

and = "and"
or = "or"

comma = ","
dot = "."

cp = ")"

op = "("

nl = "\n"
sps = sp*
spp = sps nl? sps
sp = " "
</div>
  </body>
</html>
